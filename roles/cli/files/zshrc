# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#! /bin/zsh
zmodload "zsh/zprof"
# record the amount of time zshrc takes to load
t0=$(date "+%s.%N")

source ~/.zplug/init.zsh

zplug "zplug/zplug", hook-build: 'zplug --self-manage'

zplug "zsh-users/zsh-autosuggestions"
# zplug "MichaelAquilina/zsh-auto-notify"
zplug "MichaelAquilina/zsh-you-should-use"
zplug "MichaelAquilina/zsh-history-filter"
zplug "MichaelAquilina/zsh-autoswitch-virtualenv"
zplug "zdharma/fast-syntax-highlighting"
# Theme
zplug "romkatv/powerlevel10k", as:theme


# Gist Commands
zplug "MichaelAquilina/git-commands", \
    as:command, \
    use:git-clean-branches
zplug "MichaelAquilina/git-commands", \
    as:command, \
    use:git-web

zplug "lib/completion", from:oh-my-zsh

zplug 'molovo/color', \
  as:command, \
  use:'color.zsh', \
  rename-to:color
zplug 'molovo/revolver', \
  as:command, \
  use:revolver
zplug 'molovo/zunit', \
  as:command, \
  use:zunit, \
  hook-build:'./build.zsh'

# Remove all aliases from random unexpected places
unalias -a

# Infinite History
export HISTSIZE="9999"
export SAVEHIST="9999"
export HISTFILESIZE="9999"

setopt HIST_IGNORE_DUPS
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY_TIME

setopt INTERACTIVE_COMMENTS
setopt PROMPT_CR

PREFERRED_HISTFILE="$HOME/Documents/zsh_history"
if [[ -f "$PREFERRED_HISTFILE" ]]; then
  export HISTFILE="$PREFERRED_HISTFILE"
fi

# show ISO8601 timestamp with history
alias history="fc -li 1"

bindkey '5D' emacs-backward-word  # ctrl+left
bindkey '5C' emacs-forward-word   # ctrl+right
bindkey '^[[H' beginning-of-line  # home key
bindkey '5B' beginning-of-line    # ctrl+down
bindkey '^[[F' end-of-line        # end key
bindkey '5A' end-of-line          # ctrl+up

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
# Emacs style
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line

# Use the gnome-keyring-daemon
if [[ -n "$DESKTOP_SESSION" ]]; then
    # Work around a bug where gnome keyring wont work unless ssh-agent is first launched
    eval `ssh-agent -s` > /dev/null
    # Ignore insecure-memory warning as we use an encrypted swap
    eval `gnome-keyring-daemon -s 2>/dev/null`
fi

# Use NeoVim if available
if type "nvim" >/dev/null; then
  alias vim=nvim
fi

eval $(dircolors ~/.dircolors)

export WORDCHARS=''

setopt extended_glob

export PAGER="less"
export EDITOR="nvim"

# Use pushd instead of cd
setopt AUTO_PUSHD
setopt PUSHD_SILENT

############################
#        FUNCTIONS         #
############################

# Synchronise pass account
function psync() {
  pass git pull origin master
  pass git push origin master
  pass git push backup master
}

# Get original pass binary path before overriding it
export passbin="$(which pass)"

# Function wrapper around the "pass" command to add some convenient functionality
function pass() {
    local params=()
    if [ "$1" = "generate" ]; then
        # Make sure that generate is only ever called with "--in-place"
        # with existing entries to prevent overriding useful meta-data
        local target="$HOME/.password-store/${@[-2]}.gpg"

        if stat "$target" &> /dev/null && [ ${@[(ie)-i]} -gt ${#@} ]; then
            (>&2 printf "${RED}")
            (>&2 printf "Don't use generate without -i (in-place)!\n")
            (>&2 printf "Automatically inserting -i for you\n")
            (>&2 printf "${NORMAL}")
            # automatically insert -i
            params=("${@[@]:1:1}" "-i" "${@[@]:2}")
        fi
    fi

    # Only re-use the parameters passed in if nothing was populated
    if [[ -z "$params" ]]; then
        params=("${@[@]:1}")
    fi
    (>&2 printf "${YELLOW}")
    (>&2 printf "Generated pass command: %s %s\n" "$passbin" "${(j: :)params[@]}")
    (>&2 printf "${NORMAL}")

    # Actually execute the command
    "$passbin" ${params[@]}
}

# Make it very obvious when we are running in a k8s shell
function kubectl {
   if [[ "$1" == "exec" ]]; then
       local context="$(command kubectl config current-context)"
       local background

       if [[ "$context" = *"-prod" ]]; then
         background="#783333"
       elif [[ "$context" = *"-dev" ]]; then
         background="#655511"
       else
         background="#965599"
       fi

       # Escape command to set background colours
       echo -ne "\033]11;$background\007"
   fi

   command kubectl $@

   if [[ "$1" == "exec" ]]; then
     # Escape command to reset background colours
     echo -ne "\033]110;\007\033]111;\007"
   fi
}

function whatismyip() {
  curl ifconfig.co -s --connect-timeout 1
}

############################
#         ALIASES          #
############################

# xterm-kitty is not handled very well on ssh connections
# which results in very frustrating behaviour
# setting as xterm is the next closest thing
alias= ssh="TERM=xterm ssh"

alias h="history"
alias -g NE="2>/dev/null"

alias v="vim"

# Allows aliases to be expanded on watch commands
# See https://unix.stackexchange.com/questions/25327/watch-command-alias-expansion
alias watch='watch '

alias kc="kubectl"

alias json="jq '.' -C"

alias curl="curl --silent"

alias ls="exa -lg"
alias ll="exa -lg --group-directories-first"
alias la="exa -lga --group-directories-first"

alias less="less -R"

alias ap="ansible-playbook"
alias dc="docker-compose"

# Git Aliases
alias gs="git status"
alias gc="git commit"
alias gca="git commit --amend"
alias gco="git checkout"
alias gcom="git checkout master"
alias gcod="git checkout develop"
alias gap="git add -p"
alias gpl="git pull"
alias gr="git rebase"
alias gst="git stash"
alias gw="git web"
alias gwu="git web upstream"
alias gwi="git web --issues"
alias gwp="git web --pulls"
alias gwup="git web upstream --pull-request"
alias gpum="git pull upstream master"
alias gpud="git pull upstream develop"
alias gpoh="git push -u origin HEAD"
alias gpuh="git push -u upstream HEAD"
alias grim="git rebase -i \$(git merge-base HEAD master)"
alias grid="git rebase -i \$(git merge-base HEAD develop)"
alias gd="git diff"
alias gcb="git clean-branches"
alias gpohw="gpoh && git web --pull-request"

export GH="git@github.com:MichaelAquilina"
export GL="git@gitlab.com:MichaelAquilina"
export BB="git@bitbucket.org:maquilina"

# Tig Aliases
alias ta="tig --all"
alias t="tig"

# Docker Aliases
alias dcr="docker-compose run --rm"

# Utilities
alias xopen="xdg-open"
alias explore="nautilus"
alias xc="xsel -i -b"
alias md="mkdir"

if [[ -n "$WAYLAND_DISPLAY" ]]; then
    alias xc="wl-copy"
fi

alias plog='pass git log --pretty="format:%C(bold) %G? %C(cyan) %ai %C(bold yellow)%s"'


export FZF_DEFAULT_COMMAND="rg --files --hidden -g '!.git'"

# Use filtering branch names using fzf when triggered with 'git checkout **<TAB>'
# the trigger can be customised with the environment variable $FZF_COMPLETION_TRIGGER
# Unfortunately this does not seem to work well with aliases (e.g. gco **<TAB> does not work)
function _fzf_complete_git() {
  if [[ "$@" =~ "git checkout "* ]] && git status &> /dev/null; then

    _fzf_complete +m -- "$@" < <(
      git branch | cut -c 3-
    )
  else
    # Fallback to default zsh completion otherwise
    zle ${fzf_default_completion:-expand-or-complete}
  fi
}
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.yarn/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.rvm/bin:$PATH"
export PATH="$HOME/nvim-linux64/bin:$PATH"
export PATH="$PATH:/usr/lib/postgresql11/bin"
export PATH="$$HOME/.poetry/bin:$PATH"

export MANPAGER="nvim +Man!"

[ -f "$HOME/.fzf/shell/completion.zsh" ] && source "$HOME/.fzf/shell/completion.zsh" 2> /dev/null
[ -f "$HOME/.fzf/shell/key-bindings.zsh" ] && source "$HOME/.fzf/shell/key-bindings.zsh"

# The next line updates PATH for the Google Cloud SDK.
if [ -f "/opt/google/google-cloud-sdk/path.zsh.inc" ]; then . "/opt/google/google-cloud-sdk/path.zsh.inc"; fi
# The next line enables shell command completion for gcloud.
if [ -f "/opt/google/google-cloud-sdk/completion.zsh.inc" ]; then . "/opt/google/google-cloud-sdk/completion.zsh.inc"; fi

# Leave as last command to prevent weird issues with PATH when
# changing environments
zplug load

# Plugin Options
# --------------

export ZSH_AUTOSUGGEST_USE_ASYNC=1
export AUTO_NOTIFY_THRESHOLD=8
export AUTO_NOTIFY_EXPIRE_TIME=4000
AUTO_NOTIFY_IGNORE+=("ipython")
export YSU_MESSAGE_POSITION="after"
export HISTORY_FILTER_EXCLUDE=("_KEY" "Authorization: ", "_TOKEN", "SECRET", "AWS_")
export AUTOSWITCH_DEFAULT_PYTHON="/usr/bin/python3"


# p10k configuration
# ------------------

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

function prompt_git_user() {
  if [[ -d ".git" ]]; then
    p10k segment -i "ðŸ‘¥" -t "$(git config user.email)"
  fi
}

# Originally written by romkatv here:
# https://github.com/romkatv/powerlevel10k/issues/734
# tweaked by myself so that it works with all aliases associated with the trigger
function p10k-on-post-widget() {
  # if P9K_COMMANDS does not contain git, we can exit early
  if [[ $P9K_COMMANDS[(I)(|*[/$z])git] != 0 ]]; then
    # if buffer contains "commit" then user is likely using 'git commit'
    local z=$'\0'
    if [[ $BUFFER == *commit* ]]; then
      p10k display '*/git_user'=show
      return
    fi

    # check if buffer matches any aliases for git commit we have
    local key
    for key in "${(@k)aliases}"; do
      local value="${aliases[$key]}"
      if [[ "$value" == "git commit"* && ("$BUFFER" == "$key" || "$BUFFER" == "$key "*) ]]; then
        p10k display '*/git_user'=show
        return
      fi
    done
  fi

  # if nothing matches, hide the prompt
  p10k display '*/git_user'=hide
}

POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=git_user
POWERLEVEL9K_GIT_USER_FOREGROUND=37

# k8s autocompletion
source <(kubectl completion zsh)

# Enable terraform autocomplete
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform

t1=$(date "+%s.%N")
printf "Profile took %.3f seconds to load\n" $((t1-t0))

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

if [[ "$TERM" == "xterm-kitty" ]]; then
  # this alias ensures the correct terminfo is sent automatically
  alias ssh="kitty +kitten ssh"
fi
